# -*- coding: utf-8 -*-
import os
import telebot
import time
import random
import threading
from emoji import emojize
from telebot import types
from pymongo import MongoClient
import traceback

token = os.environ['TELEGRAM_TOKEN']
bot = telebot.TeleBot(token)


client=MongoClient(os.environ['database'])
db=client.lifesim
users=db.users
locs = db.locs
kvs = db.kvs

#users.update_many({},{'$set':{'power':40,
#        'maxpower':100,
#        'sleep':100,
#        'maxsleep':100}})

streets = {
    'bitard_street':{
        'name':'–ë–∏—Ç–∞—Ä–¥-—Å—Ç—Ä–∏—Ç',
        'nearlocs':['meet_street'],
        'code':'bitard_street',
        'homes':['17', '18', '30'],
        'buildings':{},
        'humans':[]
    },
    
    'new_street':{
        'name':'–ù–æ–≤–∞—è',
        'nearlocs':['meet_street'],
        'code':'new_street',
        'homes':['101', '228'],
        'buildings':{},
        'humans':[]
    },
    
    'meet_street':{
        'name': '–í—Å—Ç—Ä–µ—á–Ω–∞—è',
        'nearlocs':['new_street', 'bitard_street'],
        'code':'meet_street',
        'homes':[],
        'buildings':{},
        'humans':[]
    }


}

#locs.remove({})

for ids in streets:
    street = streets[ids]
    if locs.find_one({'code':street['code']}) == None:
        locs.insert_one(street)  

letters = [' ', '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', 
          '—Ö', '—Ü', '—á', '—à', '—â', '—å', '—ä', '—ã', '—ç', '—é', '—è']

emjs = ['üö∂', 'üö∂‚Äç‚ôÄÔ∏è']

h_colors = ['brown', 'gold', 'orange', 'black']
h_lenghts = ['short', 'medium', 'long']

@bot.message_handler(commands=['clear_all'])
def clearall(m):
    if m.from_user.id == 441399484:
        users.remove({})
        bot.send_message(m.chat.id, '–û—á–∏—Å—Ç–∏–ª —é–∑–µ—Ä–æ–≤.')

@bot.message_handler(commands=['navigator'])
def navv(m):
    bot.send_message(m.chat.id, 'üì¥–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    
@bot.message_handler(commands=['help'])
def navv(m):
    bot.send_message(m.chat.id, 'üì¥–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')

@bot.message_handler(func = lambda message: message.text != None and message.text[0] in emjs)
def doings(m):
    if m.from_user.id != m.chat.id:
        return
    user = getuser(m.from_user)
    if m.text == 'üö∂–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ' or m.text == 'üö∂‚Äç‚ôÄÔ∏è–ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ':
        avalaible_locs = []
        h = user['human']
        street = streets[h['position']['street']]
        if h['position']['flat'] == None and h['position']['building'] == None:
            for ids in street['nearlocs']:
                avalaible_locs.append('street?'+ids)
                
            for ids in street['buildings']:
                avalaible_locs.append('building?'+ids)
            
            for ids in h['keys']:
                kv = kvs.find_one({'id':int(ids.split('#')[2])})
                if kv['home'] in street['homes'] and kv['street'] == street['code']:
                        avalaible_locs.append('home?'+str(kv['id']))
                    
        else:
            avalaible_locs.append('street?'+street)
        
        if h['gender'] == 'male':
            em = 'üö∂'
        elif h['gender'] == 'female':
            em = 'üö∂‚Äç‚ôÄÔ∏è'
        kb = types.ReplyKeyboardMarkup()
            
        for ids in avalaible_locs:
            print(ids)
            kb.add(types.KeyboardButton(em+to_text(ids, 'place')))
            
        bot.send_message(m.chat.id, '–ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–π—Ç–∏?', reply_markup=kb)
        
    

@bot.message_handler(content_types = ['text'])
def alltxts(m):
    if m.from_user.id == m.chat.id:
        user = getuser(m.from_user)
        if user['newbie']:
            users.update_one({'id':user['id']},{'$set':{'newbie':False}})
            bot.send_message(m.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –Ω–æ–≤—ã–π –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞ "–¢–µ–ª–µ–≥—Ä–∞–¥". –ù–µ –∑–Ω–∞—é, –∑–∞—á–µ–º –≤—ã —Å—é–¥–∞ –ø–æ–∂–∞–ª–æ–≤–∞–ª–∏, –Ω–æ —è –≤ —á—É–∂–∏–µ '+
                             '–¥–µ–ª–∞ –Ω–µ –ª–µ–∑—É, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è. –Ø - –ü–∞—Å—é–∫, –≥–∏–¥ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ. –ò –º–æ—è —Ä–æ–ª—å - –∑–∞—Å–µ–ª—è—Ç—å —Å—é–¥–∞ –Ω–æ–≤–æ–ø—Ä–∏–µ–∑–∂–∏—Ö, –≤–æ—Ç –∏ –≤—Å—ë ('+
                             '–ø–æ —Å–µ–∫—Ä–µ—Ç—É - –º–Ω–µ –∑–∞ —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –ø–ª–∞—Ç—è—Ç, —Ö–æ—Ç—è —è —Å—Ç–æ—é —Ç—É—Ç 24/7 –∏ –≤—Å—Ç—Ä–µ—á–∞—é –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π. –î–µ–ª–∞—é —è —ç—Ç–æ –ø–æ –¥–æ–±—Ä–æ—Ç–µ –¥—É—à–µ–≤–Ω–æ–π '+
                             '–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ –º–æ–≥—É). '+
                             '–¢–∞–∫ —á—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∏ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞–º –≤–∞—à—É –Ω–æ–≤—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É.')
            
            kb = getstartkb(user)
            bot.send_message(m.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "‚úÖ–ì–æ—Ç–æ–≤–æ", '+
                                 '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup = kb)
            return
        
        if user['wait_for_stat'] != None:
            what = user['wait_for_stat']
            allow = True
            er_text = ''
            if what == 'name':
                val = m.text.title()
                for ids in m.text:
                    if ids.lower() not in letters:
                        allow = False
                        er_text = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤!'
            elif what == 'gender':
                if m.text.lower() == '–ø–∞—Ä–µ–Ω—å':
                    val = 'male'
                if m.text.lower() == '–¥–µ–≤—É—à–∫–∞':
                    val = 'female'
                if m.text.lower() not in ['–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞']:
                    allow = False
                    er_text = '–í–∞—à –ø–æ–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ `–ø–∞—Ä–µ–Ω—å`, –ª–∏–±–æ `–¥–µ–≤—É—à–∫–∞`!'
            elif what == 'age':
                try:
                    age = int(m.text)
                    val = age
                    if age < 18 or age > 25:
                        crash += '_'
                except:
                    allow = False
                    er_text = '–ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 18 –¥–æ 25!'
            elif what == 'body.hair_color':
                if m.text.lower() == '—Ä—É—Å—ã–π':
                    val = 'brown'
                elif m.text.lower() == '–∑–æ–ª–æ—Ç–æ–π':
                    val = 'gold'
                elif m.text.lower() == '—Ä—ã–∂–∏–π':
                    val = 'orange'
                elif m.text.lower() == '—á—ë—Ä–Ω—ã–π':
                    val = 'black'
                if m.text.lower() not in ['—Ä—É—Å—ã–π', '–∑–æ–ª–æ—Ç–æ–π', '—Ä—ã–∂–∏–π', '—á—ë—Ä–Ω—ã–π']:
                    allow = False
                    er_text = '–¶–≤–µ—Ç –≤–æ–ª–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å `—Ä—É—Å—ã–π`, `–∑–æ–ª–æ—Ç–æ–π`, `—Ä—ã–∂–∏–π` –∏–ª–∏ `—á—ë—Ä–Ω—ã–π`!'
            elif what == 'body.hair_lenght':
                if m.text.lower() == '–∫–æ—Ä–æ—Ç–∫–∏–µ':
                    val = 'short'
                if m.text.lower() == '—Å—Ä–µ–¥–Ω–∏–µ':
                    val = 'medium'
                if m.text.lower() == '–¥–ª–∏–Ω–Ω—ã–µ':
                    val = 'long'
                if m.text.lower() not in ['–∫–æ—Ä–æ—Ç–∫–∏–µ', '—Å—Ä–µ–¥–Ω–∏–µ', '–¥–ª–∏–Ω–Ω—ã–µ']:
                    allow = False
                    er_text = '–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å: `–∫–æ—Ä–æ—Ç–∫–∏–µ`, `—Å—Ä–µ–¥–Ω–∏–µ`, `–¥–ª–∏–Ω–Ω—ã–µ`!'
                    
            if allow:        
                users.update_one({'id':user['id']},{'$set':{'human.'+what:val, 'wait_for_stat':None}})    
                user = getuser(m.from_user)
            
            if allow == False:
                bot.send_message(m.chat.id, er_text, parse_mode = 'markdown')
                kb = getstartkb(user)
                bot.send_message(m.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "‚úÖ–ì–æ—Ç–æ–≤–æ", '+
                                 '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup = kb)
            else:
                bot.send_message(m.chat.id, '–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–∞ "'+str(val)+'"!')
                kb = getstartkb(user)
                bot.send_message(m.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë. –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–≥–¥–∞ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "‚úÖ–ì–æ—Ç–æ–≤–æ", '+
                                 '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å!', reply_markup = kb)
                    

def getstartkb(user):
    h = user['human']
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(text = '–ò–º—è: '+str(h['name']), callback_data = 'change?name'))
    kb.add(types.InlineKeyboardButton(text = '–ü–æ–ª: '+to_text(h['gender'], 'gender').lower(), callback_data = 'change?gender'))
    kb.add(types.InlineKeyboardButton(text = '–í–æ–∑—Ä–∞—Å—Ç: '+str(h['age']), callback_data = 'change?age'))
    kb.add(types.InlineKeyboardButton(text = '–ù–∞–ª–∏—á–Ω—ã–µ: '+str(h['money']), callback_data = 'change?not'))
    kb.add(types.InlineKeyboardButton(text = '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: '+to_text(h['education'], 'education').lower(), callback_data = 'change?not'))
    kb.add(types.InlineKeyboardButton(text = '–¶–≤–µ—Ç –≤–æ–ª–æ—Å: '+to_text(h['body']['hair_color'], 'hair_color').lower(), callback_data = 'change?body.hair_color'))
    kb.add(types.InlineKeyboardButton(text = '–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å: '+to_text(h['body']['hair_lenght'], 'hair_lenght').lower(), callback_data = 'change?body.hair_lenght'))
    kb.add(types.InlineKeyboardButton(text = '‚úÖ–ì–æ—Ç–æ–≤–æ', callback_data = 'change?ready'))
    
    return kb
        
    
@bot.callback_query_handler(func = lambda call: call.data.split('?')[0] == 'change')
def changestats(call):
    user = users.find_one({'id':call.from_user.id})
    if user == None:
        return
    if user['start_stats'] == False:
        return
    what = call.data.split('?')[1]
    if what == 'not':
        bot.answer_callback_query(call.id, '–≠—Ç—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è!', show_alert = True)
        return
    users.update_one({'id':user['id']},{'$set':{'wait_for_stat':what}})
    text = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
    if what == 'name':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à–µ –∏–º—è.'
    elif what == 'gender':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à –ø–æ–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å `–ø–∞—Ä–µ–Ω—å` –∏–ª–∏ `–¥–µ–≤—É—à–∫–∞`).'
    elif what == 'age':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 25).'
    elif what == 'body.hair_color':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ü–≤–µ—Ç –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å: `—Ä—É—Å—ã–π`, `–∑–æ–ª–æ—Ç–æ–π`, `—Ä—ã–∂–∏–π`, `—á—ë—Ä–Ω—ã–π`).'
    elif what == 'body.hair_lenght':
        text = '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –¥–ª–∏–Ω—É –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å (–º–æ–≥—É—Ç –±—ã—Ç—å: `–∫–æ—Ä–æ—Ç–∫–∏–µ`, `—Å—Ä–µ–¥–Ω–∏–µ`, `–¥–ª–∏–Ω–Ω—ã–µ`).'
        
    elif what == 'ready':
        h = user['human']
        if h['name'] == None:
            bot.answer_callback_query(call.id, '–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Å –ø—É—Å—Ç—ã–º –∏–º–µ–Ω–µ–º!', show_alert = True)
            return
        else:
            medit('–•–æ—Ä–æ—à–æ! –Ø –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª, '+h['name']+'. –í–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª–∏—Ü–∞ '+
                  streets[h['street']]['name']+', –¥–æ–º '+h['home']+'. –ù–∞–¥–µ—é—Å—å, —Å–∞–º–∏ –¥–æ–±–µ—Ä—ë—Ç–µ—Å—å. –°–µ–π—á–∞—Å –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —É–ª–∏—Ü–µ –í—Å—Ç—Ä–µ—á–Ω–∞—è! '+
                  '–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–µ-—Ç–æ –º–µ—Å—Ç–æ, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–æ–º (/navigator) –Ω–∞ —Å–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –£—Å–ø–µ—Ö–æ–≤!', call.message.chat.id, call.message.message_id)
            
            users.update_one({'id':user['id']},{'$set':{'start_stats':False}})
                
            time.sleep(2)
            bot.send_message(call.message.chat.id, '–ß—É—Ç—å –Ω–µ –∑–∞–±—ã–ª! –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ (/help). –Ø —Å–∞–º –µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª!')
            return
    medit(text, call.message.chat.id, call.message.message_id, parse_mode = 'markdown')

        
def to_text(x, param):
    ans = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ (–Ω–∞–ø–∏—à–∏—Ç–µ @Loshadkin)'
    if param == 'gender':
        if x == 'male':
            ans = '–ü–∞—Ä–µ–Ω—å'
        elif x == 'female':
            ans = '–î–µ–≤—É—à–∫–∞'
            
    elif param == 'education':
        if x == 'basic':
            ans = '–û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (11 –∫–ª–∞—Å—Å–æ–≤)'
            
    elif param == 'hair_color':
        if x == 'brown':
            ans = '–†—É—Å—ã–µ'
        elif x == 'gold':
            ans = '–ó–æ–ª–æ—Ç—ã–µ'
        elif x == 'orange':
            ans = '–†—ã–∂–∏–µ'
        elif x == 'black':
            ans = '–ß—ë—Ä–Ω—ã–µ'
            
    elif param == 'hair_lenght':
        if x == 'short':
            ans = '–ö–æ—Ä–æ—Ç–∫–∏–µ'
        elif x == 'medium':
            ans = '–°—Ä–µ–¥–Ω–∏–µ'
        elif x == 'long':
            ans = '–î–ª–∏–Ω–Ω—ã–µ'
          
    elif param == 'place':
        place = x.split('?')[0]
        code = x.split('?')[1]
        if place == 'street':
            if code in ['bitard_street', 'meet_street', 'new_street']:
                ans = '–£–ª–∏—Ü–∞ '+streets[code]['name']
        if place == 'building':
            ans = '–î–æ–º '+str(code)
        if place == 'home':
            ans = '–ö–≤–∞—Ä—Ç–∏—Ä–∞ '+str(code)
    return ans
            
        
def human(user):
    allstrs = []
    for ids in streets:
        if len(streets[ids]['homes']) > 0:
            allstrs.append(streets[ids])
    street = random.choice(allstrs)
    home = random.choice(street['homes'])
    key = street['code']+'#'+home+'#'+str(user.id)
    return {
        'name':None,
        'gender':random.choice(['male', 'female']),
        'age':random.randint(18, 25),
        'money':random.randint(2000, 2500),
        'street':street['code'],
        'home':home,
        'keys':[key],
        'position':{
            'street':'meet_street',
            'flat':None,
            'building':None
        },
        'hunger':100,
        'maxhunger':100,
        'health':100,
        'maxhealth':100,
        'strenght':random.randint(3, 3),
        'intelligence':random.randint(3, 3),
        'power':40,
        'maxpower':100,
        'sleep':100,
        'maxsleep':100,
        'education':'basic',
        'body':{
            'hair_color':random.choice(h_colors),
            'hair_lenght':random.choice(h_lenghts),
            'height':random.randint(160, 190)
        }
        
    }    

def createuser(user):
    return {
        'id':user.id,
        'name':user.first_name,
        'username':user.username,
        'human':human(user),
        'newbie':True,
        'start_stats':True,
        'wait_for_stat':None
    }

def createkv(user, hom, street):
    return {
        'id':user.id,
        'name':user.first_name,
        'home':hom,
        'street':street
    }

def getuser(u):
    user = users.find_one({'id':u.id})
    if user == None:
        users.insert_one(createuser(u))
        user = users.find_one({'id':u.id})
        hom = user['human']['home']
        street = user['human']['street']
        kvs.insert_one(createkv(u, hom, street))
    return user

def medit(message_text,chat_id, message_id,reply_markup=None,parse_mode=None):
    return bot.edit_message_text(chat_id=chat_id,message_id=message_id,text=message_text,reply_markup=reply_markup,
                                 parse_mode=parse_mode)   

print('7777')
bot.polling(none_stop=True,timeout=600)

